buildscript{
    ext {
        springBootVer = '2.4.5'
        //querydslVer = '4.4.0'
        //querydslPluginVer = '1.0.10'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
        nodePluginVer = '1.3.1'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
        //이클립스인 경우를 위한 QueryDSL 플러그인. IntelliJ는 불필요. [시작]
        //classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVer}"
        //[끝] 
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
//apply plugin: 'com.github.node-gradle.node'
//이클립스인 경우를 위한 QueryDSL 플러그인. IntelliJ는 불필요.
//apply plugin: 'com.ewerk.gradle.plugins.querydsl'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group = 'com.kohort'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

//프론트엔드 노드 설정
/*
node {
    download = true
    version = '14.17.0' //설치할 노드버전
    yarnVersion = '1.13.0' // 설치할 yarn 버전
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../frontend")
}
*/
configurations {
    providedRuntime
}
/*
task webpack(type: NpmTask, dependsOn: 'npmInstall') {
    args = ['run','build']
}
// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
processResources.dependsOn 'webpack'
*/

//set build time and inject value to application.properties
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}
project.ext.set("build.date", buildTime())



/*
//이클립스인 경우를 위한 QueryDSL 설정. IntelliJ는 불필요. [시작]
def querydslDir = 'src/main/generated'
querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}
//[끝]
*/

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
	
	annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
	runtimeOnly 'mysql:mysql-connector-java'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
	
	//WebRTC 클라이언트 의존성 추가
    implementation('org.webjars.bower:webrtc-adapter:7.4.0')
    //Kurento (미디어서버) 관련 의존성 추가
    implementation('org.kurento:kurento-client:6.16.0')
    implementation('org.kurento:kurento-utils-js:6.15.0')
    
    //swagger
    implementation("io.springfox:springfox-swagger2:3.0.0")
    implementation("io.springfox:springfox-swagger-ui:3.0.0")
    implementation("io.springfox:springfox-data-rest:3.0.0")
    implementation("io.springfox:springfox-bean-validators:3.0.0")
    implementation("io.springfox:springfox-boot-starter:3.0.0")
    
    compile("javax.annotation:javax.annotation-api:1.2")
	
	compileOnly 'org.projectlombok:lombok'	
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
}

test {
	useJUnitPlatform()
}
